Sprite2:
	- Rename to sprite soonish
	- Add support for multiple objects
	- add zoom support
	- fix height/width of sprites

Add a proper event rendering loop
	messages from threads

Add animated zoom to quest

Handle resize for mesh.

Finish moving VkPipeline{Layout} out of trtl.
	- need a pipeline cache
Maybe add pushconstant support through trtl_uniform
	- so bind then push the cosntant at draw tim

Add trtl_crier -> message system
	- addd creier event to pipeline and descriptor set to autoamtically nalde the events
	when it happens.

Make it possible to add and remove objects at run time.

There needs to be a generic buffer library to allocate vertexes and indexes.
This should also probably handle updating the data and sending to the engine.
	So basically when an object is created, it allocates some space in the
	vertex and index buffers, and uses references to them

Texture loading needs to have it's own class.
Loading a texture should go to the texture service
	it looks up to see if it's there
	otherwise loads and binds it to VkImageBuffer or whatever it is.
	When the object finishes with it, it frees the usage.

Focus & a keyboard model

Others:
	bear used to generate the compile commands.
	Automate somehow; either with cmake or a script or something to do.

Simple Tasks:
	- create_vertex_buffers verte set api is kinda dumb for it's current use
	- Clean some fixes.
	- vertex.h -> trtl_model?
	- Add some tests for trtl_object_draw
	- Add typedef for the 'frame'.  trtl_frame_id or similar
		- make it small - uint8_t probably
	- Loading objects should use a shared index cache for 
		multiple of the same object.  Extra level of indirection on loading I guess
	- Use vkResetCommandBuffer instead of allocating each frame

Maybe simple tasks:
	- allow empty layers
	- Create a VkPipelineCache


