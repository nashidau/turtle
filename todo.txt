Start adding a new background object and render it;
	- can have some fun with a shader




There needs to be a generic buffer library to allocate vertexes and indexes.
This should also probably handle updating the data and sending to the engine.
	So basically when an object is created, it allocates some space in the
	vertex and index buffers, and uses references to them

Texture loading needs to have it's own class.
Loading a texture should go to the texture service
	it looks up to see if it's there
	otherwise loads and binds it to VkImageBuffer or whatever it is.
	When the object finishes with it, it frees the usage.

Work on adding a second pass for the background texture.

Focus & a keyboard model

Others:
	bear used to generate the compile commands.
	Automate somehow; either with cmake or a script or something to do.


Simple Tasks:
	- Clean some fixes.
	- vertex.h -> trtl_model?
	- Add some tests for trtl_object_draw
	- Add typedef for the 'frame'.  trtl_frame_id or similar
		- make it small - uint8_t probably
	- Loading objects should use a shared index cache for 
		multiple of the same object.  Extra level of indirection on loading I guess

	
